apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: "{{ .Release.Namespace }}"
  name: "{{ .Release.Name }}-standalone"
  labels:
    app: "{{ .Release.Name }}-standalone"
spec:
  replicas: 1
  serviceName: "{{ .Release.Name }}-standalone"
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-standalone"
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-standalone"
    spec:
      containers:
        - image: redis:6.0.9-alpine
          name: "{{ .Release.Name }}-pod"
          args:
            - /etc/redis/redis.conf
          livenessProbe:
            exec:
              command:
              - redis-cli
              - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
          - name: temp
            mountPath: /tmp
          - name: data
            mountPath: /data
          - name: redis-config
            mountPath: /etc/redis
      volumes:
      - name: temp
        emptyDir: {}
      - name: data
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-pvc"
      - name: redis-config
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-pvc"
      - name: {{ .Release.Name }}-config
        projected:
          sources:
          - configMap:
              name: {{ .Release.Name }}-config